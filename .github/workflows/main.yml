name: "Build & Release"

on:
  pull_request:
    branches:
      - dev
      - test
  push:
    branches:
      - dev
      - test

jobs:
  build:
    name: Build & Release
    runs-on: macos-latest

    steps:
      # 1. Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Setup Java (Oracle JDK 17)
      - name: Set Up Java
        uses: actions/setup-java@v4
        with:
          distribution: "oracle"
          java-version: "17"

      # 3. Setup Flutter (3.22.2)
      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.22.2"
          channel: "stable"

      # 4. Install dependencies
      - name: Install Dependencies
        run: flutter pub get
      # Uncomment the following steps if you need to handle keystore and signing
      # 5. Decode keystore from base64
      #   - name: Decode Keystore
      #     run: |
      #       echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks

      # 6. Create key.properties file #
      #   - name: Create key.properties
      #     run: |
      #       echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
      #       echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
      #       echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
      #       echo "storeFile=keystore.jks" >> android/key.properties

      # 7. Build APK
      - name: Build APK
        run: flutter build apk --release

      # 8. Build AAB
      - name: Build AppBundle
        run: flutter build appbundle

      # 9. Build iOS (IPA without signing)
      - name: Build IPA
        run: flutter build ipa --no-codesign

      # 10. Compress iOS build
      - name: Compress iOS Build
        run: |
          cd build
          tar -czf ios_build.tar.gz ios

      # 11. Upload build artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Releases
          path: |
            build/app/outputs/flutter-apk/app-release.apk
            build/app/outputs/bundle/release/app-release.aab
            build/ios_build.tar.gz

      # 12. Extract version from pubspec.yaml
      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
          echo "VERSION=$version" >> $GITHUB_ENV

      # 13. Check if version tag already exists
      - name: Check if Tag Exists
        id: check_tag
        run: |
          if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

      # 14. Modify tag if it exists
      - name: Modify Tag
        if: env.TAG_EXISTS == 'true'
        run: |
          new_version="${{ env.VERSION }}-build-${{ github.run_number }}"
          echo "VERSION=$new_version" >> $GITHUB_ENV

      # 15. Create GitHub Release
      - name: Create Release
        uses: ncipollo/release-action@v1.16.0
        with:
          artifacts: |
            build/app/outputs/flutter-apk/app-release.apk,
            build/app/outputs/bundle/release/app-release.aab,
            build/ios_build.tar.gz
          tag: v${{ env.VERSION }}
